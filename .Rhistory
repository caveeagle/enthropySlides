y = toString(i)
res <- stringShannonEntropy(y)
}
summaryRprof("myA")
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
summaryRprof("myA")
stringShannonEntropy <- function(y)
{
Rprof("myA")
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
#for(i in keys(prob) )
#{
#  freq <- prob[[i]] / total
#  h <- freq * log2(freq)
#  H = H + h
#}
H = -H
Rprof(NULL)
# Вывод энтропии
return(H)
}
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
summaryRprof("myA")
stringShannonEntropy <- function(y)
{
Rprof("myA", append=TRUE)
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
#for(i in keys(prob) )
#{
#  freq <- prob[[i]] / total
#  h <- freq * log2(freq)
#  H = H + h
#}
H = -H
Rprof(NULL)
# Вывод энтропии
return(H)
}
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
summaryRprof("myA")
stringShannonEntropy <- function(y)
{
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
#v = unlist(v)
v = lapply(v,utf8ToInt)
#v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
for(i in keys(prob) )
{
freq <- prob[[i]] / total
h <- freq * log2(freq)
H = H + h
}
H = -H
# Вывод энтропии
return(H)
}
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
summaryRprof("myA")
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
res <- 0;
for(i in 100:200)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
res <- 0;
for(i in 1000:2000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
stringShannonEntropy <- function(y)
{
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
#v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
for(i in keys(prob) )
{
freq <- prob[[i]] / total
h <- freq * log2(freq)
H = H + h
}
H = -H
# Вывод энтропии
return(H)
}
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
stringShannonEntropy <- function(y)
{
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
for(i in keys(prob) )
{
freq <- prob[[i]] / total
h <- freq * log2(freq)
H = H + h
}
H = -H
# Вывод энтропии
return(H)
}
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
ptm <- system.time()
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
system.time() - ptm
system.time(
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
system.time(
res <- 0
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
)
system.time(
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
)
stringShannonEntropy <- function(y)
{
# Перекодирование в UTF-8
#y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
for(i in keys(prob) )
{
freq <- prob[[i]] / total
h <- freq * log2(freq)
H = H + h
}
H = -H
# Вывод энтропии
return(H)
}
system.time(
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
)
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
stringShannonEntropy <- function(y)
{
# Перекодирование в UTF-8
y <- enc2utf8(y)
# Конвертация строки в массив чисел
v = strsplit(y,"")
v = unlist(v)
v = lapply(v,utf8ToInt)
v = unlist(v)
# Вычисление встречаемости
prob = hash()
for(i in v)
{
istr = toString(i)
if( !is.null( prob[[istr]] ) )
{
tmp = prob[[istr]]
tmp = tmp + 1
prob[istr] = tmp
}
else
{
prob[istr] = 1
}
}
# Вычисление энтропии
total <- length(v)
H = 0
for(i in keys(prob) )
{
freq <- prob[[i]] / total
h <- freq * log2(freq)
H = H + h
}
H = -H
# Вывод энтропии
return(H)
}
res <- 0;
for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
}
print(res)
res <- 0;
system.time(for(i in 10000:20000)
{
y = toString(i)
res <- stringShannonEntropy(y)
})
print(res)
res <- 0;
system.time(for(i in 100000:200000)
{
y = toString(i)
res <- stringShannonEntropy(y)
})
print(res)
require(rCharts)
install.packages("rCharts")
map3 <- Leaflet$new()
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
?publish
library(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello")
?runApp
runExample("01_hello")
runApp(shinyApp)
runApp()
runApp("shinyApp")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='caveeagle',
token='31EFF16295134A4C353F03D4459D6D5F',
secret='k1FpdUhogqdH6e8a0Xu7Rf7hvmiGRjQwxNvU9+Ii')
library(shinyapps)
shinyapps::deployApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
shinyapps::deployApp("shinyApp")
runApp("shinyApp")
shinyapps::deployApp("shinyApp")
shinyapps::deployApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
shinyapps::deployApp("shinyApp")
library(slidify)
install.packages("slidify")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
library(slidify)
install.packages("stringr")
library(slidify)
runApp("shinyApp")
library(shinyapps)
runApp("shinyApp")
library(shiny)
library(shin
)
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
?sidebarPanel
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
library(shinyapps)
shinyapps::deployApp("shinyApp")
runApp("shinyApp")
shinyapps::deployApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
shinyapps::deployApp("shinyApp")
publish_github
?publish_github
library(slidify)
library(slidify)
?publish_github
publish_github("caveeagle","enthropySlides")
setwd("./slidify/enthropySlides")
slidify("index.Rmd")
library(shinyapps)
slidify("index.Rmd")
library(shinyapps)
publish_github("caveeagle","enthropySlides")
setwd("./slidify/enthropySlides")
library(slidify)
library(shiny)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
stringShannonEntropy("1234567890")
